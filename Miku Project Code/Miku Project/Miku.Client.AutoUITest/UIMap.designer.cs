// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Miku.Client.AutoUITest
{
    using System.CodeDom.Compiler;
    using System.Drawing;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public partial class UIMap
    {
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations

            WinEdit uITextBox1Edit = this.UIForm1Window.UITextBox1Window.UITextBox1Edit;
            WinButton uIButton1Button = this.UIForm1Window.UIButton1Window.UIButton1Button;
            WinButton uI确定Button = this.UI提示Window.UI确定Window.UI确定Button;

            #endregion Variable Declarations

            // Type 'ddddds' in 'textBox1' text box
            uITextBox1Edit.Text = this.RecordedMethod1Params.UITextBox1EditText;

            // Click 'button1' button
            Mouse.Click(uIButton1Button, new Point(39, 9));

            // Click '确定' button
            Mouse.Click(uI确定Button, new Point(57, 17));
        }

        /// <summary>
        /// RecordedMethod2 - Use 'RecordedMethod2Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations

            WinEdit uITextBox1Edit = this.UIForm1Window.UITextBox1Window.UITextBox1Edit;
            WinButton uIButton1Button = this.UIForm1Window.UIButton1Window.UIButton1Button;
            WinButton uI确定Button = this.UI确定Window.UI确定Button;

            #endregion Variable Declarations

            // Type 'd' in 'textBox1' text box
            Keyboard.SendKeys(uITextBox1Edit, this.RecordedMethod2Params.UITextBox1EditSendKeys, ModifierKeys.None);

            // Click 'button1' button
            Mouse.Click(uIButton1Button, new Point(41, 15));

            // Click '确定' button
            Mouse.Click(uI确定Button, new Point(59, 6));

            // Type 'dddd' in 'textBox1' text box
            uITextBox1Edit.Text = this.RecordedMethod2Params.UITextBox1EditText;

            // Click 'button1' button
            Mouse.Click(uIButton1Button, new Point(43, 10));

            // Click '确定' button
            Mouse.Click(uI确定Button, new Point(56, 9));
        }

        #region Properties

        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }

        public virtual RecordedMethod2Params RecordedMethod2Params
        {
            get
            {
                if ((this.mRecordedMethod2Params == null))
                {
                    this.mRecordedMethod2Params = new RecordedMethod2Params();
                }
                return this.mRecordedMethod2Params;
            }
        }

        public UIForm1Window UIForm1Window
        {
            get
            {
                if ((this.mUIForm1Window == null))
                {
                    this.mUIForm1Window = new UIForm1Window();
                }
                return this.mUIForm1Window;
            }
        }

        public UI确定Window UI确定Window
        {
            get
            {
                if ((this.mUI确定Window == null))
                {
                    this.mUI确定Window = new UI确定Window();
                }
                return this.mUI确定Window;
            }
        }

        public UI提示Window UI提示Window
        {
            get
            {
                if ((this.mUI提示Window == null))
                {
                    this.mUI提示Window = new UI提示Window();
                }
                return this.mUI提示Window;
            }
        }

        #endregion Properties

        #region Fields

        private RecordedMethod1Params mRecordedMethod1Params;

        private RecordedMethod2Params mRecordedMethod2Params;

        private UIForm1Window mUIForm1Window;

        private UI确定Window mUI确定Window;

        private UI提示Window mUI提示Window;

        #endregion Fields
    }

    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod1Params
    {
        #region Fields

        /// <summary>
        /// Type 'ddddds' in 'textBox1' text box
        /// </summary>
        public string UITextBox1EditText = "ddddds";

        #endregion Fields
    }

    /// <summary>
    /// Parameters to be passed into 'RecordedMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod2Params
    {
        #region Fields

        /// <summary>
        /// Type 'd' in 'textBox1' text box
        /// </summary>
        public string UITextBox1EditSendKeys = "d";

        /// <summary>
        /// Type 'dddd' in 'textBox1' text box
        /// </summary>
        public string UITextBox1EditText = "dddd";

        #endregion Fields
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIForm1Window : WinWindow
    {
        public UIForm1Window()
        {
            #region Search Criteria

            this.SearchProperties[WinWindow.PropertyNames.Name] = "Form1";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Form1");

            #endregion Search Criteria
        }

        #region Properties

        public UITextBox1Window UITextBox1Window
        {
            get
            {
                if ((this.mUITextBox1Window == null))
                {
                    this.mUITextBox1Window = new UITextBox1Window(this);
                }
                return this.mUITextBox1Window;
            }
        }

        public UIButton1Window UIButton1Window
        {
            get
            {
                if ((this.mUIButton1Window == null))
                {
                    this.mUIButton1Window = new UIButton1Window(this);
                }
                return this.mUIButton1Window;
            }
        }

        #endregion Properties

        #region Fields

        private UITextBox1Window mUITextBox1Window;

        private UIButton1Window mUIButton1Window;

        #endregion Fields
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITextBox1Window : WinWindow
    {
        public UITextBox1Window(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria

            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox1";
            this.WindowTitles.Add("Form1");

            #endregion Search Criteria
        }

        #region Properties

        public WinEdit UITextBox1Edit
        {
            get
            {
                if ((this.mUITextBox1Edit == null))
                {
                    this.mUITextBox1Edit = new WinEdit(this);

                    #region Search Criteria

                    this.mUITextBox1Edit.WindowTitles.Add("Form1");

                    #endregion Search Criteria
                }
                return this.mUITextBox1Edit;
            }
        }

        #endregion Properties

        #region Fields

        private WinEdit mUITextBox1Edit;

        #endregion Fields
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIButton1Window : WinWindow
    {
        public UIButton1Window(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria

            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button1";
            this.WindowTitles.Add("Form1");

            #endregion Search Criteria
        }

        #region Properties

        public WinButton UIButton1Button
        {
            get
            {
                if ((this.mUIButton1Button == null))
                {
                    this.mUIButton1Button = new WinButton(this);

                    #region Search Criteria

                    this.mUIButton1Button.SearchProperties[WinButton.PropertyNames.Name] = "button1";
                    this.mUIButton1Button.WindowTitles.Add("Form1");

                    #endregion Search Criteria
                }
                return this.mUIButton1Button;
            }
        }

        #endregion Properties

        #region Fields

        private WinButton mUIButton1Button;

        #endregion Fields
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UI确定Window : WinWindow
    {
        public UI确定Window()
        {
            #region Search Criteria

            this.SearchProperties[WinWindow.PropertyNames.Name] = "确定";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("确定");

            #endregion Search Criteria
        }

        #region Properties

        public WinButton UI确定Button
        {
            get
            {
                if ((this.mUI确定Button == null))
                {
                    this.mUI确定Button = new WinButton(this);

                    #region Search Criteria

                    this.mUI确定Button.SearchProperties[WinButton.PropertyNames.Name] = "确定";
                    this.mUI确定Button.WindowTitles.Add("确定");

                    #endregion Search Criteria
                }
                return this.mUI确定Button;
            }
        }

        #endregion Properties

        #region Fields

        private WinButton mUI确定Button;

        #endregion Fields
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UI提示Window : WinWindow
    {
        public UI提示Window()
        {
            #region Search Criteria

            this.SearchProperties[WinWindow.PropertyNames.Name] = "提示";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("提示");

            #endregion Search Criteria
        }

        #region Properties

        public UI确定Window1 UI确定Window
        {
            get
            {
                if ((this.mUI确定Window == null))
                {
                    this.mUI确定Window = new UI确定Window1(this);
                }
                return this.mUI确定Window;
            }
        }

        #endregion Properties

        #region Fields

        private UI确定Window1 mUI确定Window;

        #endregion Fields
    }

    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UI确定Window1 : WinWindow
    {
        public UI确定Window1(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria

            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("提示");

            #endregion Search Criteria
        }

        #region Properties

        public WinButton UI确定Button
        {
            get
            {
                if ((this.mUI确定Button == null))
                {
                    this.mUI确定Button = new WinButton(this);

                    #region Search Criteria

                    this.mUI确定Button.SearchProperties[WinButton.PropertyNames.Name] = "确定";
                    this.mUI确定Button.WindowTitles.Add("提示");

                    #endregion Search Criteria
                }
                return this.mUI确定Button;
            }
        }

        #endregion Properties

        #region Fields

        private WinButton mUI确定Button;

        #endregion Fields
    }
}